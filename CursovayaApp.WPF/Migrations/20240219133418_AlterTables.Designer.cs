// <auto-generated />
using System;
using CursovayaApp.WPF.Models.DbModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CursovayaApp.WPF.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240219133418_AlterTables")]
    partial class AlterTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<int?>("DeathYear")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("FullName")
                        .IsUnique();

                    b.ToTable("Authors", t =>
                        {
                            t.HasCheckConstraint("BirthYear", "BirthYear<DeathYear");

                            t.HasCheckConstraint("DeathYear", "BirthYear<YEAR(GETDATE()) AND DeathYear<=YEAR(GETDATE())");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthYear = 1799,
                            DeathYear = 1837,
                            FullName = "Пушкин Александр Сергеевич"
                        });
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("PublishingHouseId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublishingHouseId");

                    b.HasIndex("Title", "AuthorId", "PublishingHouseId")
                        .IsUnique();

                    b.ToTable("Books", t =>
                        {
                            t.HasCheckConstraint("Quantity", "Quantity>=0");

                            t.HasCheckConstraint("Title", "LEN(Title)>0 AND Title<>''");
                        });
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.DeregBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfDereg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("DeregQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("UserId");

                    b.ToTable("DeregBooks", t =>
                        {
                            t.HasCheckConstraint("DeregQuantity", "DeregQuantity>=0");
                        });
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(900)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("Image")
                        .IsUnique()
                        .HasFilter("[Image] IS NOT NULL");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.PublishingHouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PublishingHouses", t =>
                        {
                            t.HasCheckConstraint("Name", "LEN(Name)>0 AND Name<>''");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "АСТ"
                        });
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.ReasonDereg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ReasonsDereg", t =>
                        {
                            t.HasCheckConstraint("Name", "LEN(Name)>0 AND Name<>''")
                                .HasName("Name1");
                        });
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.ReasonReg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ReasonsReg", t =>
                        {
                            t.HasCheckConstraint("Name", "LEN(Name)>0 AND Name<>''")
                                .HasName("Name2");
                        });
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.RegBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfReg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.Property<int>("RegQuantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("UserId");

                    b.ToTable("RegBooks", t =>
                        {
                            t.HasCheckConstraint("RegQuantity", "RegQuantity>=0");
                        });
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.RentalBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRentalEnd")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("BookId", "DateStart")
                        .IsUnique();

                    b.ToTable("RentalBooks", t =>
                        {
                            t.HasCheckConstraint("DateStart", "DateStart<=DateEnd");
                        });
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", t =>
                        {
                            t.HasCheckConstraint("Name", "LEN(Name)>0 AND Name<>''")
                                .HasName("Name3");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Администратор"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Библиотекарь"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Кладовщик"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Клиент"
                        });
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users", t =>
                        {
                            t.HasCheckConstraint("FullName", "LEN(FullName) > 0 AND FullName <> ''");

                            t.HasCheckConstraint("Login", "LEN(Login) >= 4 AND Login <> ''");

                            t.HasCheckConstraint("Password", "LEN(Password) >= 4 AND Password <> ''");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "СТАРТОВЫЙ АДМИНИСТРАТОР",
                            Login = "_admin123",
                            Password = "1234",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            FullName = "СТАРТОВЫЙ БИБЛИОТЕКАРЬ",
                            Login = "_libr123",
                            Password = "1234",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            FullName = "СТАРТОВЫЙ КЛАДОВЩИК",
                            Login = "_stock123",
                            Password = "1234",
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.Book", b =>
                {
                    b.HasOne("CursovayaApp.WPF.Models.DbModels.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CursovayaApp.WPF.Models.DbModels.PublishingHouse", "PublishingHouse")
                        .WithMany("Books")
                        .HasForeignKey("PublishingHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("PublishingHouse");
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.DeregBook", b =>
                {
                    b.HasOne("CursovayaApp.WPF.Models.DbModels.Book", "Book")
                        .WithMany("DeregBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CursovayaApp.WPF.Models.DbModels.ReasonDereg", "Reason")
                        .WithMany("DeregBooks")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CursovayaApp.WPF.Models.DbModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Reason");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.Photo", b =>
                {
                    b.HasOne("CursovayaApp.WPF.Models.DbModels.Book", "Book")
                        .WithMany("Photos")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.RegBook", b =>
                {
                    b.HasOne("CursovayaApp.WPF.Models.DbModels.Book", "Book")
                        .WithMany("RegBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CursovayaApp.WPF.Models.DbModels.ReasonReg", "Reason")
                        .WithMany("RegBooks")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CursovayaApp.WPF.Models.DbModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Reason");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.RentalBook", b =>
                {
                    b.HasOne("CursovayaApp.WPF.Models.DbModels.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CursovayaApp.WPF.Models.DbModels.User", "User")
                        .WithMany("RentalBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.User", b =>
                {
                    b.HasOne("CursovayaApp.WPF.Models.DbModels.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.Book", b =>
                {
                    b.Navigation("DeregBooks");

                    b.Navigation("Photos");

                    b.Navigation("RegBooks");
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.PublishingHouse", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.ReasonDereg", b =>
                {
                    b.Navigation("DeregBooks");
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.ReasonReg", b =>
                {
                    b.Navigation("RegBooks");
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CursovayaApp.WPF.Models.DbModels.User", b =>
                {
                    b.Navigation("RentalBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
